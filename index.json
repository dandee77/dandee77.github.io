[{"content":"","date":"3 April 2024","externalUrl":null,"permalink":"/tags/c++/","section":"Tags","summary":"","title":"C++","type":"tags"},{"content":"I\u0026rsquo;m a 3rd-year Computer Engineering student at Bulacan State University, currently deep in my training arc — transitioning from C++ game development into full-stack web and mobile development.\nI\u0026rsquo;ve always been passionate about building amazing things with code. With a strong foundation in programming — including OOP, manual memory management, and data structures \u0026amp; algorithms — I\u0026rsquo;m now expanding into web technologies, mobile apps, and AI-powered systems.\nThis site is where I document my journey:\n✅ Projects — what I built, how I built it, and what I learned 🧠 Insights — lessons, tech breakdowns, and workflow optimizations 🏆 Milestones — key wins and progress as I level up I\u0026rsquo;m all about learning fast, solving real problems, and constantly pushing my technical boundaries. Thanks for stopping by — let’s build something awesome. 🚀\n","date":"3 April 2024","externalUrl":null,"permalink":"/","section":"Dan’s Dev Hub 🚀","summary":"I\u0026rsquo;m a 3rd-year Computer Engineering student at Bulacan State University, currently deep in my training arc — transitioning from C++ game development into full-stack web and mobile development.\nI\u0026rsquo;ve always been passionate about building amazing things with code. With a strong foundation in programming — including OOP, manual memory management, and data structures \u0026amp; algorithms — I\u0026rsquo;m now expanding into web technologies, mobile apps, and AI-powered systems.\nThis site is where I document my journey:","title":"Dan’s Dev Hub 🚀","type":"page"},{"content":"","date":"3 April 2024","externalUrl":null,"permalink":"/tags/dbms/","section":"Tags","summary":"","title":"DBMS","type":"tags"},{"content":"","date":"3 April 2024","externalUrl":null,"permalink":"/tags/game-development/","section":"Tags","summary":"","title":"Game Development","type":"tags"},{"content":"","date":"3 April 2024","externalUrl":null,"permalink":"/tags/javascript/","section":"Tags","summary":"","title":"JavaScript","type":"tags"},{"content":" GitHub: https://github.com/dandee77/Burial-DBMS.git Documentation: MemorialDB_Documentation\n🚀 Project Overview # BurialDB is a web-based Cemetery Management System built to improve the efficiency, accuracy, and accessibility of cemetery services. Traditional cemetery operations often suffer from manual processes, which can result in delayed transactions, mismanaged records, and lack of client visibility. BurialDB addresses these issues by offering a user-friendly digital solution for both clients and administrators.\nClients can register, log in, and interact with their data through a personalized dashboard. Key features include plot browsing via an interactive vicinity map, real-time payment tracking, contract overview, and the ability to purchase slots or mausoleums directly from the interface. Administrators benefit from robust tools to monitor statistics, manage client information, oversee all contracts, and track overall revenue.\n🧠 Core Features # 🔐 Client Interface # Your browser does not support the video tag. Account registration and login Dashboard with notifications (e.g., pending or overdue payments) Interactive vicinity map to explore plots and mausoleums Slot purchasing with automatic cost computation Contract overview and monthly online payments Editable user profile 🛠️ Admin Interface # Your browser does not support the video tag. System statistics and revenue dashboard Full access to client and contract records Plot and mausoleum information management Performance tracking with graphs and insights 🛠️ Tech Stack # Component Technology Backend Python (FastAPI) Database SQLite Frontend HTML, CSS, JavaScript API Architecture REST API Deployment Uvicorn + Ngrok 🖼️ Key Pages \u0026amp; Functionality # Client Side: # Landing Page – Introductory page showcasing the service Dashboard – Notifications and financial overview Vicinity Map – Interactive visualization of the entire cemetery layout Buy A Plan – Slot purchasing page with detailed cost computation Payments – Contract list with status and payment options Profile – Update personal information Admin Side: # Statistics Dashboard – Graphs and summaries of revenue and system activity Clients Page – Complete list of client data and actions Contracts Page – Overview of all contract information and statuses 🧩 System Architecture Overview # Figure 1: Landing Page Flowchart\nMemorialDB, we followed a practical and straightforward development process using a mix of front-end and back-end technologies. We designed the user interface with HTML, CSS, and JavaScript to make sure the website looked clean, was easy to navigate, and worked well on different devices. On the back-end, we used Python with FastAPI to handle the logic behind the scenes. FastAPI allowed us to create a fast and secure connection between the website and the database. For storing data like burial records and plot information, we chose SQLite—a simple, lightweight database that was easy to set up and worked well for our project’s needs. To make the system accessible online while we were developing and testing it, we used Ngrok. This tool gave us a public URL that linked to our local server, making it easy to test the website from different devices or share it with others for feedback.\nFigure 2: Dashboard Flowchart\nThe system follows a client-server model using FastAPI for backend logic and RESTful APIs for communication. The database schema includes models for clients, slots, deceased individuals, contracts, and payments. Authentication is temporarily managed with session variables and will transition to JWT for improved security in the future.\nUser actions on the frontend (e.g., buying a slot or viewing payments) send requests to the API, which processes the logic and interacts with the SQLite database. Responses are then rendered back into the UI dynamically.\n📦 Folder Structure # BurialDB/ ├── static/ │ ├── assets/ │ ├── styels.css │ └── script.js ├── template/ │ ├── index.html │ └── dashboard/ ├── main.py ├── models.py ├── database.py ├── seed_data.py ├── requirements.txt └── README.md 🔧 Setup \u0026amp; Deployment # To run the system locally:\ngit clone https://github.com/dandee77/Burial-DBMS.git cd Burial-DBMS pip install -r requirements.txt python main.py Then open the frontend HTML files in your browser (serve with Live Server or similar tools).\n⚠️ If it is not working, then see the repository for more info MemorialDB-github\n🌱 Future Improvements # Secure authentication using JWT tokens Mobile responsiveness Admin editing for deceased records and slots Integration with digital payment gateways Search and filter system for maps and contracts ✨ Final Thoughts # BurialDB modernizes an overlooked sector by bringing digital efficiency to cemetery operations. Through automation, real-time access, and user-focused design, this project shows how even traditional industries can benefit from thoughtful tech innovation.\n📚 References \u0026 Tools Used FastAPI Documentation SQLite Documentation MDN Web Docs ","date":"3 April 2024","externalUrl":null,"permalink":"/posts/burial_db/","section":"Posts","summary":"GitHub: https://github.com/dandee77/Burial-DBMS.git Documentation: MemorialDB_Documentation\n🚀 Project Overview # BurialDB is a web-based Cemetery Management System built to improve the efficiency, accuracy, and accessibility of cemetery services. Traditional cemetery operations often suffer from manual processes, which can result in delayed transactions, mismanaged records, and lack of client visibility. BurialDB addresses these issues by offering a user-friendly digital solution for both clients and administrators.\nClients can register, log in, and interact with their data through a personalized dashboard.","title":"MemorialDB: A Modern Cemetery Management System","type":"posts"},{"content":"","date":"3 April 2024","externalUrl":null,"permalink":"/tags/projects/","section":"Tags","summary":"","title":"Projects","type":"tags"},{"content":"","date":"3 April 2024","externalUrl":null,"permalink":"/tags/python/","section":"Tags","summary":"","title":"Python","type":"tags"},{"content":"","date":"3 April 2024","externalUrl":null,"permalink":"/tags/raylib/","section":"Tags","summary":"","title":"Raylib","type":"tags"},{"content":"","date":"3 April 2024","externalUrl":null,"permalink":"/tags/rest-api/","section":"Tags","summary":"","title":"REST API","type":"tags"},{"content":" ✨ Did you know? # This game was GameJam Plus | Asia \u0026amp; Ocenia Region: SEMI FINALIST🏆\nGithub: https://github.com/dandee77/space-ablaze.git Itch.io: https://dandee77.itch.io/space-ablaze\n🚀 Project Overview # Space Ablaze is a 2D top-down survival shooter game developed using C++ and the Raylib graphics library. The game throws the player into a hostile space environment swarming with alien ships. The objective is simple: survive as long as possible while taking down waves of enemies. With retro arcade aesthetics, responsive controls, and adrenaline-fueled action, Space Ablaze delivers a bite-sized but addictive gameplay experience.\nYour browser does not support the video tag. 🎮 Gameplay Features # Survival Mode: Endless waves of enemies with increasing difficulty. Simple Controls: Movement via mouse cursor, shooting with left mouse button or E keyboard button to auto-shoot. Powerups: Temporary boosts like shield, rapid fire, and health drops (Coming Soon). Explosions and Effects: Particle effects and screen shakes to enhance immersion. 🛠️ Tech Stack # Component Technology Language C++ Graphics Library Raylib Assets Game assets from itch.io Build Tool CMake / g++ Platform Desktop (Windows/Linux) 🧠 Design Considerations # Entity Component System (ECS)-like structure: Lightweight object-based system to separate logic. Game loop efficiency: Fixed timestep updates and decoupled rendering. Asset Management: Texture caching and centralized loading to prevent redundant memory usage. Memory efficiency: Utilizes the RAII programming technique for fast and quick memory I/O. Optimization: Uses various data structures and the C++ STL for better perfomance. 🖼️ Game Architecture Diagram # Game Window and Rendering Architecture The game window is initialized and managed through the Application class, defined in application.hpp. This class is responsible for setting up the core application lifecycle, including window creation, event handling, and the main game loop. It abstracts away platform-specific windowing logic to provide a clean and centralized entry point for the game runtime. Rendering responsibilities are decoupled from the application logic and handled separately in game.cpp. This separation of concerns promotes a modular design, where the renderer is focused solely on drawing game objects, managing visual assets, and updating frames based on game state.\nBy abstracting rendering logic into game.cpp, the system achieves better maintainability and scalability. The Application class delegates rendering tasks to the renderer, allowing high-level logic (such as state management and timing) to remain isolated from low-level graphics operations. The Entity Class All entities in the system inherit from the abstract base class Entity. For example, the Player class represents the player character, while the Asteroid and Enemy classes represent other game objects. The Enemy class serves as a base for specialized enemy types, including LowLevelEnemy, MidLevelEnemy, and HighLevelEnemy. To ensure cleaner and more efficient implementation, all enemy instances are managed within a single container using a hash map. This design leverages polymorphism and abstraction to provide a robust and scalable entity architecture.\nAll entity containers utilize std::shared_ptr to ensure proper memory management. Additionally, textures and animations used by the entities are referenced rather than duplicated, minimizing memory overhead and improving performance. 📦 Folder Structure # SpaceAblaze/ ├── src/ │ ├── main.cpp │ ├── player.cpp/.h │ ├── enemy.cpp/.h │ ├── bullet.cpp/.h ├── assets/ │ ├── sprites/ │ └── sounds/ ├── build/ ├── CMakeLists.txt └── README.md The SpaceAblaze project is organized to maintain clarity, modularity, and ease of scalability. At its core, the src/ directory contains the game\u0026rsquo;s source code, including the main entry point (main.cpp) and the implementation of key gameplay components such as the player, enemies, and bullets, each split into their respective .cpp and .h files to maintain separation of interface and implementation.\nGame assets are stored under the assets/ directory, with subfolders for sprites/ and sounds/, allowing for clean management of visual and audio resources. The build/ directory serves as the target for compiled binaries and intermediate files, keeping the working directory clean and focused. Project configuration is handled through CMakeLists.txt, supporting portable and scalable builds across systems. Additionally, the root-level README.md provides documentation and guidance for understanding, building, and running the project. 🔧 Build \u0026amp; Run # This project is organized for you to run the game from source without any hassle. Just paste this in your terminal:\nbuild ⚠️ If it is not working, then see the repository for more info SpaceAblaze-github\n🌟 Future Improvements # Add boss levels every N waves Soundtrack and dynamic background music Score saving and leaderboard Gamepad support Steam deployment ✨ Final Thoughts # This project was built from scratch as a personal challenge to explore lower-level game dev with C++ and get hands-on with Raylib. It’s a compact yet complete game that showcases core game development concepts—game loops, input handling, collision detection, resource management, and user feedback.\n📚 References \u0026 Tools Used Raylib Documentation Game Assets CMake Official Docs ","date":"3 April 2024","externalUrl":null,"permalink":"/posts/space_ablaze/","section":"Posts","summary":"✨ Did you know? # This game was GameJam Plus | Asia \u0026amp; Ocenia Region: SEMI FINALIST🏆\nGithub: https://github.com/dandee77/space-ablaze.git Itch.io: https://dandee77.itch.io/space-ablaze\n🚀 Project Overview # Space Ablaze is a 2D top-down survival shooter game developed using C++ and the Raylib graphics library. The game throws the player into a hostile space environment swarming with alien ships. The objective is simple: survive as long as possible while taking down waves of enemies.","title":"Space Ablaze: 2D Survival Shooter Game written in C++ using RayLib Library","type":"posts"},{"content":"","date":"3 April 2024","externalUrl":null,"permalink":"/tags/sql/","section":"Tags","summary":"","title":"SQL","type":"tags"},{"content":"🔖 Explore Topics with Ease!\nWelcome to my tags page, where I\u0026rsquo;ve neatly organized posts for your convenience. Whether you\u0026rsquo;re into server, artificial intelligence, or boosting productivity, my tags make finding what you want a piece of cake.\nJust click a tag, and voilà! You\u0026rsquo;ll unlock a bunch of related reads. It\u0026rsquo;s like having your very own map to a world of tech topics. Enjoy exploring! 🚀📚\n","date":"3 April 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"🔖 Explore Topics with Ease!\nWelcome to my tags page, where I\u0026rsquo;ve neatly organized posts for your convenience. Whether you\u0026rsquo;re into server, artificial intelligence, or boosting productivity, my tags make finding what you want a piece of cake.\nJust click a tag, and voilà! You\u0026rsquo;ll unlock a bunch of related reads. It\u0026rsquo;s like having your very own map to a world of tech topics. Enjoy exploring! 🚀📚","title":"Tags","type":"tags"},{"content":"","date":"3 April 2024","externalUrl":null,"permalink":"/tags/website/","section":"Tags","summary":"","title":"Website","type":"tags"},{"content":"","date":"13 June 2022","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]